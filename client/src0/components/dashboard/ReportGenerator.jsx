import React, { useState } from 'react';
import jsPDF from 'jspdf';

const ReportGenerator = () => {
  const [formData, setFormData] = useState({
    subject: '',
    topic: '',
    teamMembers: '',
    status: '',
    challenges: '',
    nextSteps: '',
    priority: '',
    date: '',
    client: '',
    summary: '',
  });

  const [aiSummary, setAiSummary] = useState('');

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const generateAISummary = () => {
    setAiSummary(
      `AI-Generated Summary: This project on ${formData.subject} has been progressing steadily with a team of ${formData.teamMembers}. The current status is ${formData.status}.`
    );
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.setFont('helvetica', 'normal');

    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.text('Project Report', 14, 20);

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Date: ${formData.date || 'N/A'}`, 14, 30);
    doc.text(`Priority: ${formData.priority || 'N/A'}`, 14, 36);
    doc.text(`Client: ${formData.client || 'N/A'}`, 14, 42);

    doc.setLineWidth(0.5);
    doc.line(14, 45, 200, 45);

    let yOffset = 55;
    const sectionSpacing = 10;

    const addSection = (label, content) => {
      doc.setFont('helvetica', 'bold');
      doc.text(`${label}:`, 14, yOffset);
      yOffset += sectionSpacing;
      doc.setFont('helvetica', 'normal');

      const lines = doc.splitTextToSize(content || 'N/A', 180);
      doc.text(lines, 14, yOffset);
      yOffset += lines.length * 6;
    };

    addSection('Subject', formData.subject);
    addSection('Topic', formData.topic);
    addSection('Team Members', formData.teamMembers);
    addSection('Status', formData.status);
    addSection('Challenges', formData.challenges);
    addSection('Next Steps', formData.nextSteps);

    let summaryText = '';
    if (formData.summary.trim()) {
      summaryText += `User Summary: ${formData.summary.trim()}\n\n`;
    }
    if (aiSummary.trim()) {
      summaryText += `${aiSummary.trim()}`;
    }
    if (!summaryText) {
      summaryText = 'N/A';
    }

    addSection('Summary', summaryText);

    doc.setFontSize(8);
    doc.text('Generated by Project Report Generator', 14, 290);
    doc.text(`Page ${doc.internal.getNumberOfPages()}`, 200, 290);

    doc.save('project_report.pdf');
  };

  const goBack = () => {
    window.history.back();
  };

  return (
    <div className="container">
      <div className="form-container">
        <h1 className="title">üìù Project Report Generator</h1>

        <button onClick={goBack} className="go-back-btn">
          üîô Go Back
        </button>

        <div className="input-fields">
          {[
            { name: 'subject', placeholder: 'Project Subject' },
            { name: 'topic', placeholder: 'Topic/Module' },
            { name: 'teamMembers', placeholder: 'Team Members (comma-separated)' },
            { name: 'status', placeholder: 'Status (e.g., On Track)' },
            { name: 'priority', placeholder: 'Priority (e.g., High, Medium, Low)' },
            { name: 'client', placeholder: 'Client Name' },
          ].map((field) => (
            <input
              key={field.name}
              type="text"
              name={field.name}
              placeholder={field.placeholder}
              value={formData[field.name]}
              onChange={handleChange}
              className="input-field"
            />
          ))}

          <textarea
            name="challenges"
            placeholder="Challenges Faced"
            value={formData.challenges}
            onChange={handleChange}
            className="input-field"
          />
          <textarea
            name="nextSteps"
            placeholder="Next Steps"
            value={formData.nextSteps}
            onChange={handleChange}
            className="input-field"
          />
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            className="input-field"
          />
          <textarea
            name="summary"
            placeholder="Project Summary"
            value={formData.summary}
            onChange={handleChange}
            className="input-field"
          />
        </div>

        <div className="ai-section">
          <button onClick={generateAISummary} className="ai-btn">
            üß† Generate AI Summary
          </button>
          {aiSummary && <div className="ai-summary">{aiSummary}</div>}
        </div>

        <button onClick={generatePDF} className="download-btn">
          üì• Download PDF
        </button>
      </div>

      <style jsx>{`
        .container {
          min-height: 100vh;
          display: flex;
          justify-content: center;
          align-items: flex-start;
          padding: 40px 20px;
          background: #0f2027; /* Optional background */
          font-family: 'Segoe UI', Roboto, sans-serif;
        }

        .form-container {
          width: 100%;
          max-width: 900px;
          padding: 40px;
          border-radius: 20px;
          background: rgba(255, 255, 255, 0.05);
          backdrop-filter: blur(20px);
          -webkit-backdrop-filter: blur(20px);
          border: 1px solid rgba(255, 255, 255, 0.2);
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
          color: #ffffff;
        }

        .title {
          font-size: 2.5rem;
          font-weight: bold;
          color: #00ffe0;
          margin-bottom: 20px;
        }

        .input-fields {
          display: flex;
          flex-direction: column;
          gap: 15px;
          margin-bottom: 30px;
        }

        .input-field {
          padding: 12px;
          border: none;
          border-radius: 10px;
          background: rgba(255, 255, 255, 0.1);
          color: #fff;
          font-size: 1rem;
          resize: vertical;
        }

        .input-field::placeholder {
          color: #ccc;
        }

        .ai-section {
          margin-bottom: 20px;
        }

        .ai-btn,
        .download-btn,
        .go-back-btn {
          background-color: #00ffe0;
          color: #000;
          border: none;
          padding: 12px 20px;
          border-radius: 10px;
          font-weight: bold;
          cursor: pointer;
          transition: background-color 0.3s ease;
          margin-right: 10px;
        }

        .ai-btn:hover,
        .download-btn:hover,
        .go-back-btn:hover {
          background-color: #00ccb3;
        }

        .ai-summary {
          margin-top: 10px;
          background: rgba(255, 255, 255, 0.1);
          padding: 10px;
          border-radius: 8px;
          color: #00ffcc;
          white-space: pre-wrap;
        }
      `}</style>
    </div>
  );
};

export default ReportGenerator;
